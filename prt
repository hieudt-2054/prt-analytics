set -e
GREEN='\033[0;32m'
WHITE='\033[1;37m'
YELLOW='\033[1;33m'
BLACK='\033[0;30m'
RED='\033[33;31m'

dataCloc={}

clocRunning() {
    echo -e "${YELLOW}> PRT Cloc running... ${GREEN}"
    echo "PATH CLOC : ${PATH_CLOC}"
    if [[ "$PATH_CLOC" == "all" ]]; then
        dataCloc=$(cloc $(git ls-files) --exclude-ext=phar,json --json)
    else
        dataCloc=$(cloc $PATH_CLOC --exclude-ext=phar,json --json)
    fi
    echo -e ${WHITE}
}

getCoverage() {
    clocRunning
    echo -e "${YELLOW}> PRT Coverage running... ${GREEN}"
    echo -e "Branch: ${CI_BRANCH}"
    value=$(echo "$(cat coverage/index.html)" | grep -Pzo '>Total</td>(.*\n.*){3}' | grep -Pzo '[0-9]{1,3}\.[0-9]{1,2}\% covered' | grep -Pzo '[0-9]{1,3}\.[0-9]{1,2}')
    echo -e "Token: ${TOKEN}"
    echo -e "Endpoint: ${ENDPOINT}"
    echo -e "Value: ${value}"
    echo -e "Cloc: ${dataCloc}"
    curl -d "code=${TOKEN}&value=$(echo ${value/./%2E})&branch=$(echo $CI_BRANCH)&cloc=${dataCloc}" -X POST ${ENDPOINT} --trace-ascii /dev/stdout
}



case $1 in
    "cloc")
        clocRunning
        ;;
    "coverage")
        #something
        getCoverage
        ;;
    *)
        echo -e "${RED}Not found command"
        echo -e "${GREEN}Please follow guideline"
        echo -e ${WHITE}
        echo -e "Usage:"
        echo "prt <task>"
        echo "Task in cloc, coverage"
        echo "Example: prt cloc "
        exit
esac



